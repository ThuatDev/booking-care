// Import c√°c th∆∞ vi·ªán v√† component c·∫ßn thi·∫øt
import React, { useState, useEffect } from 'react' // Import React v√† hai hooks useState v√† useEffect t·ª´ th∆∞ vi·ªán react
import axios from 'axios' // Import th∆∞ vi·ªán axios ƒë·ªÉ th·ª±c hi·ªán c√°c request HTTP
import ProgressBar from './ProgressBar' // Import component ProgressBar
import Question from './Question' // Import component Question
import ChatBot from '../ChatBot/ChatBox'

// ƒê·ªãnh nghƒ©a interface cho d·ªØ li·ªáu c√¢u h·ªèi
interface QuestionData {
  questionId: number // ID c·ªßa c√¢u h·ªèi
  question: string // N·ªôi dung c√¢u h·ªèi
  options: string[] // C√°c l·ª±a ch·ªçn tr·∫£ l·ªùi
  answers: number[] // C√°c c√¢u tr·∫£ l·ªùi
}

// ƒê·ªãnh nghƒ©a component SurveyQuestions
const SurveyQuestions: React.FC = () => {
  // Kh·ªüi t·∫°o c√°c state
  const [depressionLevel, setDepressionLevel] = useState<string | null>(null)
  const [currentQuestion, setCurrentQuestion] = useState(0) // State cho c√¢u h·ªèi hi·ªán t·∫°i
  const [answers, setAnswers] = useState<number[]>([]) // State cho c√°c c√¢u tr·∫£ l·ªùi
  const [totalScore, setTotalScore] = useState<number | null>(null) // State cho t·ªïng ƒëi·ªÉm
  const [questionsData, setQuestionsData] = useState<QuestionData[]>([]) // State cho d·ªØ li·ªáu c√¢u h·ªèi
  const [loading, setLoading] = useState(true) // State cho tr·∫°ng th√°i loading
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null) // State cho c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn

  // Hook useEffect ƒë·ªÉ fetch d·ªØ li·ªáu c√¢u h·ªèi khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const response = await axios.get('http://localhost:3001/questions') // G·ª≠i request GET ƒë·ªÉ l·∫•y d·ªØ li·ªáu c√¢u h·ªèi
        setQuestionsData(response.data) // C·∫≠p nh·∫≠t state questionsData v·ªõi d·ªØ li·ªáu c√¢u h·ªèi nh·∫≠n ƒë∆∞·ª£c
        setAnswers(new Array(response.data.length).fill(0)) // Kh·ªüi t·∫°o m·∫£ng answers v·ªõi ƒë·ªô d√†i b·∫±ng s·ªë l∆∞·ª£ng c√¢u h·ªèi v√† m·ªói ph·∫ßn t·ª≠ ƒë·ªÅu l√† 0
        setLoading(false) // ƒê·∫∑t tr·∫°ng th√°i loading th√†nh false
      } catch (error) {
        console.error('Failed to fetch questions:', error) // In l·ªói n·∫øu c√≥ l·ªói x·∫£y ra khi fetch d·ªØ li·ªáu
        setLoading(false) // ƒê·∫∑t tr·∫°ng th√°i loading th√†nh false
      }
    }

    fetchQuestions() // G·ªçi h√†m fetchQuestions
  }, [])

  const handleAnswer = (answerIndex: number) => {
    // T·∫°o m·ªôt b·∫£n sao c·ªßa m·∫£ng answers hi·ªán t·∫°i
    const newAnswersArray = [...answers]

    // L·∫•y c√¢u tr·∫£ l·ªùi t∆∞∆°ng ·ª©ng v·ªõi answerIndex t·ª´ c√¢u h·ªèi hi·ªán t·∫°i
    const selectedAnswer = questionsData[currentQuestion].answers[answerIndex]

    // Thay th·∫ø c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi hi·ªán t·∫°i trong m·∫£ng m·ªõi
    newAnswersArray[currentQuestion] = selectedAnswer

    // C·∫≠p nh·∫≠t state answers v·ªõi m·∫£ng m·ªõi
    setAnswers(newAnswersArray)
  }
  console.log('üöÄ ~ handleAnswer ~ setAnswers:', setAnswers)
  // H√†m ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
  const navigateToPreviousQuestion = () => {
    setCurrentQuestion((prev) => prev - 1) // Gi·∫£m currentQuestion ƒëi 1

    setSelectedAnswer(answers[currentQuestion - 1]) // C·∫≠p nh·∫≠t selectedAnswer v·ªõi c√¢u tr·∫£ l·ªùi c·ªßa c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
  }

  // H√†m ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn c√¢u h·ªèi ti·∫øp theo
  const navigateToNextQuestion = () => {
    const nextQuestion = currentQuestion + 1 // T√≠nh index c·ªßa c√¢u h·ªèi ti·∫øp theo
    setCurrentQuestion(nextQuestion) // C·∫≠p nh·∫≠t currentQuestion
    setSelectedAnswer(null) // Reset selectedAnswer

    // N·∫øu c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi ti·∫øp theo ƒë√£ ƒë∆∞·ª£c ch·ªçn tr∆∞·ªõc ƒë√≥, s·ª≠ d·ª•ng n√≥. Ng∆∞·ª£c l·∫°i, reset selectedAnswer.
    if (answers[nextQuestion] !== 0) {
      setSelectedAnswer(answers[nextQuestion])
    } else {
      setSelectedAnswer(null)
    }

    // N·∫øu c√¢u h·ªèi ti·∫øp theo v∆∞·ª£t qu√° c√¢u h·ªèi cu·ªëi c√πng, t√≠nh to√°n ƒëi·ªÉm s·ªë.
    if (nextQuestion >= questionsData.length) {
      calculateScore()
    }
  }

  // H√†m kh·ªüi ƒë·ªông l·∫°i b√†i kh·∫£o s√°t
  const restartSurvey = () => {
    setCurrentQuestion(0) // Reset currentQuestion v·ªÅ 0
    setAnswers(new Array(questionsData.length).fill(0)) // Reset m·∫£ng answers

    setTotalScore(null) // Reset totalScore
    setSelectedAnswer(null) // Reset selectedAnswer
  }

  // C·∫≠p nh·∫≠t h√†m calculateScore
  const calculateScore = async () => {
    try {
      const response = await axios.post('http://localhost:3000/calculate', { answers })
      console.log('>>>>>>data', response.data)
      setTotalScore(response.data.totalScore)
      setDepressionLevel(response.data.depressionLevel)
    } catch (error) {
      console.error('Failed to calculate score:', error)
    }
  }

  // C·∫≠p nh·∫≠t render cho totalScore v√† depressionLevel
  if (totalScore !== null && depressionLevel !== null) {
    return (
      <div className='relative m-auto h-full w-full items-start px-1 md:w-md lg:w-lg xl:w-xl flex justify-evenly'>
        <div className='md mx-auto my-6 w-9/12'>
          <h3 className='text-center text-2xl font-semibold'>B·∫°n ƒë√£ ho√†n th√†nh B√†i Test</h3>
          <div className='w-full h-72 bg-slate-50 rounded-sm mt-4 py-11 px-6 border-spacing-x-px shadow-xl'>
            <p className='font-medium'>ƒêi·ªÉm Stress:</p>
            <p className='font-semibold text-center flex justify-center pt-12 text-6xl'>{totalScore}</p>

            <p className='pt-16 font-semibold'> ƒê√°nh gi√° Stress: {depressionLevel}</p>
            {/* <button
            className='bg-gray-500 text-white px-40 py-2 rounded hover:bg-gray-600 focus:outline-none mt-12 flex justify-center mx-auto'
            onClick={restartSurvey}
          >
            L√†m l·∫°i
          </button> */}
          </div>
          {/* <div></div> */}
        </div>
        <div className=' mt-10 mx-10'>
          <div></div>
          <ChatBot />
        </div>
      </div>
    )
  }

  // N·∫øu ch∆∞a c√≥ totalScore, hi·ªÉn th·ªã c√¢u h·ªèi v√† c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
  return (
    <div className='relative m-auto h-full w-full items-start px-1 md:w-md lg:w-lg xl:w-xl'>
      Tr·∫°ng th√°i ho√†n th√†nh
      <ProgressBar current={currentQuestion} total={questionsData.length} />
      <Question
        data={questionsData[currentQuestion]}
        onAnswer={handleAnswer}
        selectedAnswer={selectedAnswer}
        setSelectedAnswer={setSelectedAnswer}
      />
      <div className='sm:flex justify-end mt-10'>
        {currentQuestion >= 2 && (
          <button
            className='bg-[#28a745] font-semibold px-8 py-2   mx-1 md:mx-3 rounded hover:bg-gray-600 text-sm sm:text-base focus:outline-none'
            onClick={restartSurvey}
          >
            B·∫Øt ƒë·∫ßu l·∫°i
          </button>
        )}
        {currentQuestion > 0 && (
          <button
            className='bg-[#45bee5] font-semibold px-8 py-2 mx-1 md:mx-3 rounded text-sm sm:text-base focus:outline-none'
            onClick={navigateToPreviousQuestion}
          >
            Tr∆∞·ªõc ƒë√≥
          </button>
        )}
        {currentQuestion < questionsData.length && (
          <button
            className={`font-semibold px-8 py-2  mx-1 md:mx-3 rounded text-sm sm:text-base focus:outline-none ${
              selectedAnswer === null ? 'bg-gray-400' : 'bg-yellow-400'
            }`}
            onClick={navigateToNextQuestion}
            disabled={selectedAnswer === null}
          >
            Ti·∫øp theo
          </button>
        )}
      </div>
    </div>
  )
}

export default SurveyQuestions
